"use strict";(self.webpackChunkbinary_security=self.webpackChunkbinary_security||[]).push([[1625],{5680:(e,n,a)=>{a.d(n,{xA:()=>p,yg:()=>g});var t=a(6540);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function r(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=t.createContext({}),d=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},p=function(e){var n=d(e.components);return t.createElement(l.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),c=d(a),f=i,g=c["".concat(l,".").concat(f)]||c[f]||u[f]||o;return a?t.createElement(g,s(s({ref:n},p),{},{components:a})):t.createElement(g,s({ref:n},p))}));function g(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=a.length,s=new Array(o);s[0]=f;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r[c]="string"==typeof e?e:i,s[1]=r;for(var d=2;d<o;d++)s[d]=a[d];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}f.displayName="MDXCreateElement"},7421:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var t=a(8168),i=(a(6540),a(5680));const o={},s="Dynamic Analysis",r={unversionedId:"Binary Analysis/Dynamic Analysis/Reading/README",id:"Binary Analysis/Dynamic Analysis/Reading/README",title:"Dynamic Analysis",description:"Introduction",source:"@site/docs/Binary Analysis/Dynamic Analysis/Reading/README.md",sourceDirName:"Binary Analysis/Dynamic Analysis/Reading",slug:"/Binary Analysis/Dynamic Analysis/Reading/",permalink:"/binary-security/Binary Analysis/Dynamic Analysis/Reading/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Dynamic Analysis",permalink:"/binary-security/Binary Analysis/Dynamic Analysis/"},next:{title:"Dynamic-Analysis",permalink:"/binary-security/Binary Analysis/Dynamic Analysis/Dynamic-Analysis"}},l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Objectives &amp; Rationale",id:"objectives--rationale",level:3},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Before GDB",id:"before-gdb",level:3},{value:"GDB Basic Commands",id:"gdb-basic-commands",level:2},{value:"Getting help with GDB",id:"getting-help-with-gdb",level:3},{value:"Opening a program with GDB",id:"opening-a-program-with-gdb",level:3},{value:"Disassembling",id:"disassembling",level:3},{value:"Adding Breakpoints",id:"adding-breakpoints",level:3},{value:"Listing Breakpoints",id:"listing-breakpoints",level:3},{value:"Deleting Breakpoints",id:"deleting-breakpoints",level:3},{value:"Execution Flow",id:"execution-flow",level:4},{value:"Examine and Print, Your Most Powerful Tools",id:"examine-and-print-your-most-powerful-tools",level:3},{value:"GDB Command file",id:"gdb-command-file",level:3},{value:"Using GDB to modify variables",id:"using-gdb-to-modify-variables",level:3},{value:"Pwndbg",id:"pwndbg",level:2},{value:"Pwndbg Commands",id:"pwndbg-commands",level:3},{value:"Altering variables and memory with Pwndbg and GDB",id:"altering-variables-and-memory-with-pwndbg-and-gdb",level:3},{value:"The Stack",id:"the-stack",level:2},{value:"Stack Growth",id:"stack-growth",level:3},{value:"Frame Pointers and Local Function Variables",id:"frame-pointers-and-local-function-variables",level:3},{value:"Function Parameters",id:"function-parameters",level:3},{value:"Calling Functions (<code>call</code> and <code>ret</code>)",id:"calling-functions-call-and-ret",level:3},{value:"Next Section Preview: Buffer Overflows",id:"next-section-preview-buffer-overflows",level:3},{value:"Challenges",id:"challenges",level:2},{value:"01. Challenge - Explore The Simple Password Protected Bash",id:"01-challenge---explore-the-simple-password-protected-bash",level:3},{value:"02. Challenge - Simple Password Protected Bash Destruction",id:"02-challenge---simple-password-protected-bash-destruction",level:3},{value:"03. Challenge - Domino",id:"03-challenge---domino",level:3},{value:"04. Challenge - Call Me",id:"04-challenge---call-me",level:3},{value:"05. Challenge - Snooze Me",id:"05-challenge---snooze-me",level:3},{value:"06. Challenge - Phone Home",id:"06-challenge---phone-home",level:3},{value:"07. Challenge - Chain Encoder",id:"07-challenge---chain-encoder",level:3},{value:"08. Challenge - Simple CD Key",id:"08-challenge---simple-cd-key",level:3}],p={toc:d},c="wrapper";function u({components:e,...n}){return(0,i.yg)(c,(0,t.A)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"dynamic-analysis"},"Dynamic Analysis"),(0,i.yg)("h2",{id:"introduction"},"Introduction"),(0,i.yg)("h3",{id:"objectives--rationale"},"Objectives & Rationale"),(0,i.yg)("p",null,"The first part of this session will give you a walkthrough of the most common GDB principles that we are going to use in exploitation.\nIn the second half, we are going to use these concepts in practice, to evade a basic key evaluation program."),(0,i.yg)("p",null,"Black Box type analysis works best when standard algorithms are used in the program, such as: ",(0,i.yg)("inlineCode",{parentName:"p"},"MD5"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"SHA1"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"RSA"),".\nWe can change the input to a more suggestive one and use the output to estimate what function was used to convert it."),(0,i.yg)("p",null,"Combined with behavioral analysis methods such as using sandboxes or strace/ltrace we can quickly map sections of code to functionalities."),(0,i.yg)("p",null,"With dynamic analysis, packed malware can be extracted from memory in unpacked form, enabling us to continue static analysis on the complete binary."),(0,i.yg)("h3",{id:"prerequisites"},"Prerequisites"),(0,i.yg)("p",null,"In the current session we will use GDB extensively.\nWe assume that you are familiar with its basic usage and will move on quickly to some of its more advanced features."),(0,i.yg)("p",null,"To brush up on the GDB basics, read this ",(0,i.yg)("a",{parentName:"p",href:"https://security.cs.pub.ro/summer-school/wiki/session/04-gdb",title:"session:04-gdb"},"Refresher"),"."),(0,i.yg)("p",null,"The executable used in the demo is called ",(0,i.yg)("inlineCode",{parentName:"p"},"sppb")," and is the challenge 1 binary."),(0,i.yg)("h3",{id:"before-gdb"},"Before GDB"),(0,i.yg)("p",null,"One thing you should always do before firing up GDB is to try to learn all the available information on the executable you're trying to debug through the techniques that have been presented so far."),(0,i.yg)("p",null,"For the purposes of this session it is a good idea to always run",(0,i.yg)("inlineCode",{parentName:"p"},"objdump")," on all the executable files before attaching GDB to them so that you have a better idea of what goes where."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"objdump -M intel -d [executable]\n")),(0,i.yg)("h2",{id:"gdb-basic-commands"},"GDB Basic Commands"),(0,i.yg)("h3",{id:"getting-help-with-gdb"},"Getting help with GDB"),(0,i.yg)("p",null,"Whenever you want to find out more information about GDB commands feel free to search for it inside ",(0,i.yg)("a",{parentName:"p",href:"http://www.gnu.org/software/gdb/documentation/",title:"http://www.gnu.org/software/gdb/documentation/"},"the documentation")," or by using the ",(0,i.yg)("inlineCode",{parentName:"p"},"help")," command followed by your area of interest.\nFor example searching for help for the ",(0,i.yg)("inlineCode",{parentName:"p"},"disassemble")," command can be obtained by running the following command in GDB:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"# Print info about all help areas available.\n# Identify the area of your question.\n(gdb) help\n\n# Print info about available data commands.\n# Identify the command you want to learn more about.\n(gdb) help data\n\n# Print info about a specific command.\n# Find out more about the command you are searching for.\n(gdb) help disassemble\n")),(0,i.yg)("h3",{id:"opening-a-program-with-gdb"},"Opening a program with GDB"),(0,i.yg)("p",null,"A program can be opened for debugging in a number of ways.\nWe can run GDB directly attaching it to a program:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"gdb [executable-file]\n")),(0,i.yg)("p",null,"Or we can open up GDB and then specify the program we are trying to attach to using the file or file-exec command:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"$ gdb\n(gdb) file [executable-file]\n")),(0,i.yg)("p",null,"Furthermore we can attach GDB to a running service if we know its process id:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"gdb --pid [pid_number]\n")),(0,i.yg)("h3",{id:"disassembling"},"Disassembling"),(0,i.yg)("p",null,"GDB allows disassembling of binary code using the ",(0,i.yg)("inlineCode",{parentName:"p"},"disassemble")," command\n(it may be shortened to ",(0,i.yg)("inlineCode",{parentName:"p"},"disas"),").\nThe command can be issued either on a\nmemory address or using labels."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"(gdb) disassemble *main\nDump of assembler code for function main:\n   0x080491c9 <+0>:     push   ebp\n   0x080491ca <+1>:     mov    ebp,esp\n   0x080491cc <+3>:     push   ebx\n   0x080491cd <+4>:     sub    esp,0x4\n=> 0x080491d0 <+7>:     mov    eax,ds:0x804c030\n....Output ommited.....\n\n(gdb) disassemble 0x080491c9\nDump of assembler code for function main:\n   0x080491c9 <+0>:     push   ebp\n   0x080491ca <+1>:     mov    ebp,esp\n   0x080491cc <+3>:     push   ebx\n   0x080491cd <+4>:     sub    esp,0x4\n=> 0x080491d0 <+7>:     mov    eax,ds:0x804c030\n")),(0,i.yg)("h3",{id:"adding-breakpoints"},"Adding Breakpoints"),(0,i.yg)("p",null,"Breakpoints are important to suspend the execution of the program being debugged in a certain place.\nAdding breakpoints is done with the ",(0,i.yg)("inlineCode",{parentName:"p"},"break")," command.\nA good idea is to place a breakpoint at the main function of the program you are trying to exploit.\nGiven the fact that you have already run ",(0,i.yg)("inlineCode",{parentName:"p"},"objdump")," and disassembled the program you know the address for the start of the main function.\nThis means that we can set a breakpoint for the start of our program in two ways:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"(gdb) break *main (when the binary is not stripped of symbols)\n(gdb) break *0x[main_address_obtained_with_objdump] (when aslr is off)\n")),(0,i.yg)("p",null,"The general format for setting breakpoints in GDB is as follows:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"(gdb) break [LOCATION] [thread THREADNUM] [if CONDITION]\n")),(0,i.yg)("p",null,"Issuing the ",(0,i.yg)("inlineCode",{parentName:"p"},"break")," command with no parameters will place a breakpoint at the current address.\nGDB allows using abbreviated forms for all the commands it supports.\nLearning these abbreviations comes with time and will greatly improve you work output.\nAlways be on the lookout for using abbreviated commands"),(0,i.yg)("p",null,"The abbreviated command for setting breakpoints is simply ",(0,i.yg)("inlineCode",{parentName:"p"},"b"),"."),(0,i.yg)("h3",{id:"listing-breakpoints"},"Listing Breakpoints"),(0,i.yg)("p",null,"At any given time all the breakpoints in the program can be displayed using the ",(0,i.yg)("inlineCode",{parentName:"p"},"info breakpoints")," command:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"(gdb) info breakpoints\n")),(0,i.yg)("p",null,"You can also issue the abbreviated form of the command"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"(gdb) i b\n")),(0,i.yg)("h3",{id:"deleting-breakpoints"},"Deleting Breakpoints"),(0,i.yg)("p",null,"Breakpoints can be removed by issuing the ",(0,i.yg)("inlineCode",{parentName:"p"},"delete breakpoints")," command followed by the breakpoints number, as it is listed in the output of the\n",(0,i.yg)("inlineCode",{parentName:"p"},"info breakpoints")," command."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"(gdb) delete breakpoints [breakpoint_number]\n")),(0,i.yg)("p",null,"You can also delete all active breakpoints by issuing the following the ",(0,i.yg)("inlineCode",{parentName:"p"},"delete breakpoints")," command with no parameters:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"(gdb) delete breakpoints\n")),(0,i.yg)("p",null,"Once a breakpoint is set you would normally want to launch the program into execution.\nYou can do this by issuing the ",(0,i.yg)("inlineCode",{parentName:"p"},"run")," command.\nThe program will start executing and stop at the first breakpoint you have set."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"(gdb) run\n")),(0,i.yg)("h4",{id:"execution-flow"},"Execution Flow"),(0,i.yg)("p",null,"Execution flow can be controlled in GDB using the ",(0,i.yg)("inlineCode",{parentName:"p"},"continue"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"stepi"),",",(0,i.yg)("inlineCode",{parentName:"p"},"nexti")," as follows:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"(gdb) help continue\n# Continue program being debugged, after signal or breakpoint.\n# If proceeding from breakpoint, a number N may be used as an argument,\n# which means to set the ignore count of that breakpoint to N - 1 (so that the breakpoint won't break until the Nth time it is reached).\n\n(gdb) help stepi\n# Step one instruction exactly.\n# Argument N means do this N times (or till program stops for another reason).\n\n(gdb) help nexti\n# Step one instruction, but proceed through subroutine calls.\n# Argument N means do this N times (or till program stops for another reason).\n")),(0,i.yg)("p",null,"You can also use the abbreviated format of the commands: ",(0,i.yg)("inlineCode",{parentName:"p"},"c")," (",(0,i.yg)("inlineCode",{parentName:"p"},"continue"),"), ",(0,i.yg)("inlineCode",{parentName:"p"},"si")," (",(0,i.yg)("inlineCode",{parentName:"p"},"stepi"),"), ",(0,i.yg)("inlineCode",{parentName:"p"},"ni")," (",(0,i.yg)("inlineCode",{parentName:"p"},"nexti"),")."),(0,i.yg)("p",null,"If at any point you want to start the program execution from the beginning you can always reissue the ",(0,i.yg)("inlineCode",{parentName:"p"},"run")," command."),(0,i.yg)("p",null,"Another technique that can be used for setting breakpoints is using offsets."),(0,i.yg)("p",null,"As you already know, each assembly instruction takes a certain number of bytes inside the executable file.\nThis means that whenever you are setting breakpoints using offsets you must always set them at instruction boundaries."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"(gdb) break *main\nBreakpoint 1 at 0x80491d0\n(gdb) run\nStarting program: sppb\n\nBreakpoint 1, 0x80491d0 in main ()\n(gdb) disassemble main\nDump of assembler code for function main:\n   0x080491c9 <+0>:     push   ebp\n   0x080491ca <+1>:     mov    ebp,esp\n   0x080491cc <+3>:     push   ebx\n   0x080491cd <+4>:     sub    esp,0x4\n.....Output ommited.....\n(gdb) break *main+4\nBreakpoint 2 at 0x80491cd\n")),(0,i.yg)("h3",{id:"examine-and-print-your-most-powerful-tools"},"Examine and Print, Your Most Powerful Tools"),(0,i.yg)("p",null,"GDB allows examining of memory locations be them specified as addresses or stored in registers.\nThe ",(0,i.yg)("inlineCode",{parentName:"p"},"x")," command (for ",(0,i.yg)("em",{parentName:"p"},"examine"),") is arguably one of the most powerful tool in your arsenal and the most common command you are going to run when exploiting.\nThe format for the ",(0,i.yg)("inlineCode",{parentName:"p"},"examine")," command is as follows:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},'(gdb) x/nfu [address]\n        n:  How many units to print\n        f:  Format character\n              a Pointer\n              c Read as integer, print as character\n              d Integer, signed decimal\n              f Floating point number\n              o Integer, print as octal\n              s Treat as C string (read all successive memory addresses until null character and print as characters)\n              t Integer, print as binary (t="two")\n              u Integer, unsigned decimal\n              x Integer, print as hexadecimal\n        u:  Unit\n              b: Byte\n              h: Half-word (2 bytes)\n              w: Word (4 bytes)\n              g: Giant word (8 bytes)\n              i: Instruction (read n assembly instructions from the specified memory address)\n')),(0,i.yg)("p",null,"In contrast with the examine command, which reads data at a memory location the ",(0,i.yg)("inlineCode",{parentName:"p"},"print")," command (shorthand ",(0,i.yg)("inlineCode",{parentName:"p"},"p"),") prints out values stored in registers and variables.\nThe format for the ",(0,i.yg)("inlineCode",{parentName:"p"},"print")," command is as follows:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},'(gdb) p/f [what]\n        f:  Format character\n              a Pointer\n              c Read as integer, print as character\n              d Integer, signed decimal\n              f Floating point number\n              o Integer, print as octal\n              s Treat as C string (read all successive memory addresses until null character and print as characters)\n              t Integer, print as binary (t="two")\n              u Integer, unsigned decimal\n              x Integer, print as hexadecimal\n              i Instruction (read n assembly instructions from the specified memory address)\n')),(0,i.yg)("p",null,"For a better explanation please follow through with the following example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},'# A breakpoint has been set inside the program and the program has been run with the appropriate commands to reach the breakpoint.\n# At this point we want to see which are the following 10 instructions.\n(gdb) x/10i 0x80491cd\n   0x80491cd <main+4>:  sub    esp,0x4\n   0x80491d0 <main+7>:  mov    eax,ds:0x804c030\n   0x80491d5 <main+12>: push   0x0\n   0x80491d7 <main+14>: push   0x1\n   0x80491d9 <main+16>: push   0x0\n   0x80491db <main+18>: push   eax\n   0x80491dc <main+19>: call   0x8049080 <setvbuf@plt>\n\n# Let\'s examine the memory at 0x804a02a because we have a hint that this address holds one of the parameters of the scanf call  as it is afterwards placed on the stack (we\'ll explain later how we have reached this conclusion).\n# The other parameter will be an address where the input will be stored.\n(gdb) x/s 0x804a02a\n0x804a02a:      "%d"\n\n# We now set a breakpoint for *main+56.\n(gdb) break *0x08049201\nBreakpoint 3 at 0x08049201\n(gdb) continue\nContinuing.\n\nBreakpoint 3, 0x08049201 in main ()\n\n# We then record the value of the eax register somewhere and use nexti(ni) and then we input an integer.\n# Let\'s examine the address which we recorded earlier corresponding to the eax register (it should\'ve held the address for the integer we input).\n# Take note that in GDB registers are preceded by the "$" character very much like variables.\n(gdb) x/d 0xffffcf70 <- (your address)\n0xffffcf70:     <your input>\n# Now let\'s print the contents of the eax register as hexadecimal.\n(gdb) p/x $eax\n$1 = <your input>\n\n# The diference between p and x can be observed by issuing the following commands:\nx/s 0x804a030\n0x804a030:      "Your password is: %d. Evaluating it...\\n"\n\np /s 0x804a030\n\n# $2 = 1920298841 which is the number in decimal format that "Your" can be translated to by its ascii codes (little endian so written as 0x72756F59).\n\n# In order to see the same result we must use the command p /s (char*)0x804a030 and dereference the pointer ourselves.\n# As you can see the address holds the memory for the beginning of the string.\n# This shows you how "x" interprets data from memory while "p" merely prints out the contents in the required format\n# You can think of it as "x" dereferencing while "p" not dereferencing\n')),(0,i.yg)("h3",{id:"gdb-command-file"},"GDB Command file"),(0,i.yg)("p",null,"When exploiting, there are a couple of commands that you will issue periodically and doing that by hand will get cumbersome.\nGDB commands files will allow you to run a specific set of commands automatically after each command you issue manually.\nThis comes in especially handy when you're stepping through a program and want to see what happens with the registers and stack after each instruction is ran, which is the main target when exploiting."),(0,i.yg)("p",null,"The examine command only has sense when code is already running on the machine so inside the file we are going to use the display command which translates to the same output."),(0,i.yg)("p",null,"In order to use this option you must first create your commands file.\nThis file can include any GDB commands you like but a good start would be printing out the content of all the register values, the next ten instructions that are going to be executed, and some portion from the top of the stack."),(0,i.yg)("p",null,"The reason for examining all of the above after each instruction is ran will become more clear once the we go through the second section of the session."),(0,i.yg)("p",null,"Command file template:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"display/10i $eip\ndisplay/x $eax\ndisplay/x $ebx\ndisplay/x $ecx\ndisplay/x $edx\ndisplay/x $edi\ndisplay/x $esi\ndisplay/x $ebp\ndisplay/32xw $esp\n")),(0,i.yg)("p",null,"In order to view all register values you could use the ",(0,i.yg)("inlineCode",{parentName:"p"},"x")," command.\nHowever the values of all registers can be obtained by running the",(0,i.yg)("inlineCode",{parentName:"p"},"info all-registers")," command:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"(gdb) info all-registers\neax            0x8048630,134514224\necx            0xbffff404,-1073744892\nedx            0xbffff394,-1073745004\nebx            0xb7fc6ff4,-1208193036\nesp            0xbffff330,0xbffff330\nebp            0xbffff368,0xbffff368\nesi            0x0,0\nedi            0x0,0\neip            0x80484e9,0x80484e9 <main+37>\neflags         0x286,[ PF SF IF ]\ncs             0x73,115\nss             0x7b,123\nds             0x7b,123\nes             0x7b,123\nfs             0x0,0\ngs             0x33,51\nst0            *value not available*\nst1            *value not available*\nst2            *value not available*\nst3            *value not available*\nst4            *value not available*\nst5            *value not available*\nst6            *value not available*\nst7            *value not available*\nfctrl          0x37f,895\nfstat          0x0,0\nftag           0xffff,65535\nfiseg          0x0,0\nfioff          0x0,0\nfoseg          0x0,0\n---Type <return> to continue, or q <return> to quit---\nfooff          0x0,0\nfop            0x0,0\nmxcsr          0x1f80,[ IM DM ZM OM UM PM ]\nymm0           *value not available*\nymm1           *value not available*\nymm2           *value not available*\nymm3           *value not available*\nymm4           *value not available*\nymm5           *value not available*\nymm6           *value not available*\nymm7           *value not available*\nmm0            *value not available*\nmm1            *value not available*\nmm2            *value not available*\nmm3            *value not available*\nmm4            *value not available*\nmm5            *value not available*\nmm6            *value not available*\nmm7            *value not available*\n")),(0,i.yg)("p",null,"One thing you might notice while using GDB is that addresses seem to be pretty similar between runs.\nAlthough with experience you will gain a better feel for where an address points to, one thing to remember at this point would be that stack addresses usually have the ",(0,i.yg)("inlineCode",{parentName:"p"},"0xbffff\u2026.")," format.\nIn order to run GDB with the commands file you have just generated, when launching GDB specify the ",(0,i.yg)("inlineCode",{parentName:"p"},"-x [command_file]")," parameter."),(0,i.yg)("h3",{id:"using-gdb-to-modify-variables"},"Using GDB to modify variables"),(0,i.yg)("p",null,"GDB can be used to modify variables during runtime.\nIn the case of exploitation this comes in handy as the program can be altered at runtime with the purpose of changing the execution path to desired branches."),(0,i.yg)("h2",{id:"pwndbg"},"Pwndbg"),(0,i.yg)("p",null,"As you can see using GDB can be cumbersome, this is why we recommend using the Pwndbg plug-in.\nThe tutorial as well as the repository of the project can be found ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/pwndbg/pwndbg"},"here"),"."),(0,i.yg)("p",null,"Give the fact that Pwndbg is just a wrapper, all the functionality of GDB will be available when running gdb with the Pwndbg plug-in.\nSome of the advantages of using pwngdb include:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Automatic preview of registers, code and stack after each instruction (you no longer need to create your own commands file)"),(0,i.yg)("li",{parentName:"ul"},"Automatic dereferencing and following through of memory locations"),(0,i.yg)("li",{parentName:"ul"},"Color coding")),(0,i.yg)("p",null,"An alternative to Pwndbg is ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/hugsy/gef"},"GEF"),".\nHowever, this tutorial is designed with Pwndbg in mind."),(0,i.yg)("h3",{id:"pwndbg-commands"},"Pwndbg Commands"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"pdis")," command gives a pretty output that is similar to what the ",(0,i.yg)("inlineCode",{parentName:"p"},"disas")," command in GDB prints:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"Usage:  pdis 0x80491d0\n")),(0,i.yg)("p",null,"If ",(0,i.yg)("inlineCode",{parentName:"p"},"pdis")," is used with an address as a parameter, the output will be similar to what ",(0,i.yg)("inlineCode",{parentName:"p"},"x/Ni")," prints out (where N is the number of instructions you want to disassemble):"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"Usage:  pdis [address] [N] - where N is the number of instructions you want to be printed\n")),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"stepi")," command has the same effect as in GDB however, if you are running Pwndbg you will notice that after each step Pwndbg will automatically print register values, several lines of code from ",(0,i.yg)("inlineCode",{parentName:"p"},"eip"),".\nregister and a portion of the stack:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"pwndbg> stepi\n\nLEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ REGISTERS ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n*EAX  0xf7facd20 (_IO_2_1_stdout_) \u25c2\u2014 0xfbad2084\n EBX  0x0\n ECX  0xa00af61b\n EDX  0xffffcfb4 \u25c2\u2014 0x0\n EDI  0xf7fac000 (_GLOBAL_OFFSET_TABLE_) \u25c2\u2014 0x1e9d6c\n ESI  0xf7fac000 (_GLOBAL_OFFSET_TABLE_) \u25c2\u2014 0x1e9d6c\n EBP  0xffffcf78 \u25c2\u2014 0x0\n ESP  0xffffcf70 \u2014\u25b8 0xf7fac000 (_GLOBAL_OFFSET_TABLE_) \u25c2\u2014 0x1e9d6c\n*EIP  0x80491d5 (main+12) \u25c2\u2014 push   0 /* 'j' */\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   0x80491d0 <main+7>     mov    eax, dword ptr [stdout@GLIBC_2.0] <0x804c030>\n \u25ba 0x80491d5 <main+12>    push   0\n   0x80491d7 <main+14>    push   1\n   0x80491d9 <main+16>    push   0\n   0x80491db <main+18>    push   eax\n   0x80491dc <main+19>    call   setvbuf@plt <setvbuf@plt>\n\n   0x80491e1 <main+24>    add    esp, 0x10\n   0x80491e4 <main+27>    mov    dword ptr [ebp - 8], 0\n   0x80491eb <main+34>    push   0x804a010\n   0x80491f0 <main+39>    call   puts@plt <puts@plt>\n\n   0x80491f5 <main+44>    add    esp, 4\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ SOURCE (CODE) ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nIn file: /home/kali/Desktop/dokermaker/binary-internal/sessions/05-dynamic-analysis/activities/01-02-challenge-sppb/src/sppb.c\n    6   execve(\"/bin/sh\", 0, 0);\n    7 }\n    8\n    9 int main()\n   10 {\n \u25ba 11   setvbuf(stdout, NULL, _IOLBF, 0);\n   12   int readValue = 0;\n   13\n   14   printf(\"Please provide password: \\n\");\n   15   scanf(\"%d\", &readValue);\n   16\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ STACK ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n00:0000\u2502 esp 0xffffcf70 \u2014\u25b8 0xf7fac000 (_GLOBAL_OFFSET_TABLE_) \u25c2\u2014 0x1e9d6c\n01:0004\u2502     0xffffcf74 \u25c2\u2014 0x0\n02:0008\u2502 ebp 0xffffcf78 \u25c2\u2014 0x0\n03:000c\u2502     0xffffcf7c \u2014\u25b8 0xf7de0fd6 (__libc_start_main+262) \u25c2\u2014 add    esp, 0x10\n04:0010\u2502     0xffffcf80 \u25c2\u2014 0x1\n05:0014\u2502     0xffffcf84 \u2014\u25b8 0xffffd024 \u2014\u25b8 0xffffd1d9 \u25c2\u2014 '/home/kali/Desktop/sppb'\n06:0018\u2502     0xffffcf88 \u2014\u25b8 0xffffd02c \u2014\u25b8 0xffffd24d \u25c2\u2014 'COLORFGBG=15;0'\n07:001c\u2502     0xffffcf8c \u2014\u25b8 0xffffcfb4 \u25c2\u2014 0x0\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ BACKTRACE ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \u25ba f 0 0x80491d5 main+12\n   f 1 0xf7de0fd6 __libc_start_main+262\n\n")),(0,i.yg)("p",null,"You can always use the following commands to obtain context at any given moment inside the debug process:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"context reg")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"context code")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"context stack")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"context all"))),(0,i.yg)("p",null,"One additional Pwndbg command which can be used to show values in registers is the ",(0,i.yg)("inlineCode",{parentName:"p"},"telescope")," command.\nThe command does dereferencing of the pointer values until it gets to a value and prints out the entire trace."),(0,i.yg)("p",null,"The command can be used with both registers and memory addresses:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"pwndbg$ telescope $esp\n00:0000\u2502 esp 0xffffcf70 \u2014\u25b8 0xf7fac000 (_GLOBAL_OFFSET_TABLE_) \u25c2\u2014 0x1e9d6c\n01:0004\u2502     0xffffcf74 \u25c2\u2014 0x0\n02:0008\u2502 ebp 0xffffcf78 \u25c2\u2014 0x0\n03:000c\u2502     0xffffcf7c \u2014\u25b8 0xf7de0fd6 (__libc_start_main+262) \u25c2\u2014 add    esp, 0x10\n04:0010\u2502     0xffffcf80 \u25c2\u2014 0x1\n05:0014\u2502     0xffffcf84 \u2014\u25b8 0xffffd024 \u2014\u25b8 0xffffd1d9 \u25c2\u2014 '/home/kali/Desktop/sppb'\n06:0018\u2502     0xffffcf88 \u2014\u25b8 0xffffd02c \u2014\u25b8 0xffffd24d \u25c2\u2014 'COLORFGBG=15;0'\n07:001c\u2502     0xffffcf8c \u2014\u25b8 0xffffcfb4 \u25c2\u2014 0x0\npwndbg> telescope 0xffffcf84\n00:0000\u2502  0xffffcf84 \u2014\u25b8 0xffffd024 \u2014\u25b8 0xffffd1d9 \u25c2\u2014 '/home/kali/Desktop/sppb'\n01:0004\u2502  0xffffcf88 \u2014\u25b8 0xffffd02c \u2014\u25b8 0xffffd24d \u25c2\u2014 'COLORFGBG=15;0'\n02:0008\u2502  0xffffcf8c \u2014\u25b8 0xffffcfb4 \u25c2\u2014 0x0\n03:000c\u2502  0xffffcf90 \u2014\u25b8 0xffffcfc4 \u25c2\u2014 0xe38ae80b\n04:0010\u2502  0xffffcf94 \u2014\u25b8 0xf7ffdb60 \u2014\u25b8 0xf7ffdb00 \u2014\u25b8 0xf7fc93e0 \u2014\u25b8 0xf7ffd9a0 \u25c2\u2014 ...\n05:0014\u2502  0xffffcf98 \u2014\u25b8 0xf7fc9410 \u2014\u25b8 0x804832d \u25c2\u2014 'GLIBC_2.0'\n06:0018\u2502  0xffffcf9c \u2014\u25b8 0xf7fac000 (_GLOBAL_OFFSET_TABLE_) \u25c2\u2014 0x1e9d6c\n07:001c\u2502  0xffffcfa0 \u25c2\u2014 0x1\n")),(0,i.yg)("p",null,"In the example above, the memory address 0x8048630 was loaded into ",(0,i.yg)("inlineCode",{parentName:"p"},"EAX"),".\nThat is why examining the register or the memory location gives the same output."),(0,i.yg)("p",null,"For more information on various Pwndbg commands you can always visit the help.\nHowever you should also know the basics of using GDB as well."),(0,i.yg)("h3",{id:"altering-variables-and-memory-with-pwndbg-and-gdb"},"Altering variables and memory with Pwndbg and GDB"),(0,i.yg)("p",null,"In addition to basic registers, GDB has a two extra variables which map onto some of the existing registers, as follows:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"$pc - $eip")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"$sp - $esp")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"$fp - $ebp"))),(0,i.yg)("p",null,"In addition to these there are also two registers which can be used to view the processor state ",(0,i.yg)("inlineCode",{parentName:"p"},"$ps - processor status")),(0,i.yg)("p",null,"Values of memory addresses and registers can be altered at execution time.\nBecause altering memory is a lot easier using Pwndbg we are going to use it throughout today's session."),(0,i.yg)("p",null,"The easiest way of altering the execution flow of a program is editing the ",(0,i.yg)("inlineCode",{parentName:"p"},"$eflags")," register just before jump instructions."),(0,i.yg)("p",null,"Using GDB the ",(0,i.yg)("inlineCode",{parentName:"p"},"$eflags")," register can be easily modified:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"pwndbg> reg eflags\nEFLAGS 0x282 [ cf pf af zf SF IF df of ]\nSet the ZF flag\npwndbg> set $eflags |= (1 << 6)\nClear the ZF flag\npwndbg> set $eflags &= ~(1 << 6)\n")),(0,i.yg)("p",null,"Notice that the flags that are set are printed in all-caps when the",(0,i.yg)("inlineCode",{parentName:"p"},"reg eflags")," command is issued."),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"set")," command  (GDB native) can be used to modify values that reside inside memory."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"pwndbg> telescope 0x804a010\n00:0000\u2502  0x804a010 \u25c2\u2014 'Please provide password: '\n01:0004\u2502  0x804a014 \u25c2\u2014 'se provide password: '\n02:0008\u2502  0x804a018 \u25c2\u2014 'rovide password: '\n03:000c\u2502  0x804a01c \u25c2\u2014 'de password: '\n04:0010\u2502  0x804a020 \u25c2\u2014 'assword: '\n05:0014\u2502  0x804a024 \u25c2\u2014 'ord: '\n06:0018\u2502  0x804a028 \u25c2\u2014 0x64250020 /* ' ' */\n07:001c\u2502  0x804a02c \u25c2\u2014 0x0\n\npwndbg> set {char [14]} 0x804a010 = \"No pass here\"\nWritten 28 bytes to 0x8048630\npwndbg> telescope 0x8048630\n00:0000\u2502  0x804a010 \u25c2\u2014 'No pass here'\n01:0004\u2502  0x804a014 \u25c2\u2014 'ass here'\n02:0008\u2502  0x804a018 \u25c2\u2014 'here'\n03:000c\u2502  0x804a01c \u25c2\u2014 0x70200000\n04:0010\u2502  0x804a020 \u25c2\u2014 'assword: '\n05:0014\u2502  0x804a024 \u25c2\u2014 'ord: '\n06:0018\u2502  0x804a028 \u25c2\u2014 0x64250020 /* ' ' */\n07:001c\u2502  0x804a02c \u25c2\u2014 0x0\n")),(0,i.yg)("p",null,"As you can see the string residing in memory at address ",(0,i.yg)("inlineCode",{parentName:"p"},"0x8048630")," has been modified using the ",(0,i.yg)("inlineCode",{parentName:"p"},"set")," command."),(0,i.yg)("p",null,"Pwngdb does not offer enhancements in modifying registry values.\nFor modifying registry values you can use the GDB ",(0,i.yg)("inlineCode",{parentName:"p"},"set")," command."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-{.code}"},"pwngdb> p/x $eax\n$10 = 0x1\npwngdb> set $eax=0x80\npwngdb> p/x $eax\n$11 = 0x80\n")),(0,i.yg)("h2",{id:"the-stack"},"The Stack"),(0,i.yg)("p",null,"This section details process of function calling in detail.\nUnderstanding function calling and stack operations during program execution is essential to exploitation."),(0,i.yg)("p",null,"The stack is one of the areas of memory which gets the biggest attention in exploitation writing."),(0,i.yg)("h3",{id:"stack-growth"},"Stack Growth"),(0,i.yg)("p",null,"The stack grows from high memory addresses to low memory addresses."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"pwndbg>  pdis $eip\n\n   0x80491db <main+18>    push   eax\n   0x80491dc <main+19>    call   setvbuf@plt <setvbuf@plt>\n\n   0x80491e1 <main+24>    add    esp, 0x10\n   0x80491e4 <main+27>    mov    dword ptr [ebp - 8], 0\n   0x80491eb <main+34>    push   0x804a010\n \u25ba 0x80491f0 <main+39>    call   puts@plt <puts@plt>\n\npwndbg> p/x $esp\n$1 = 0xffffcf6c\npwndbg> si\n0x8049050 in puts@plt ()\npwndbg> p/x $esp\n$5 = 0xffffcf68\n")),(0,i.yg)("p",null,"As you can see from the example above the \\$esp register had an initial value of ",(0,i.yg)("inlineCode",{parentName:"p"},"0xffffcf6c"),".\nThe next instruction that is about to be executed is a push (it pushes ",(0,i.yg)("inlineCode",{parentName:"p"},"0x0")," on the stack).\nWe execute the instruction and then reevaluate the value of ",(0,i.yg)("inlineCode",{parentName:"p"},"$esp"),".\nAs we can see ",(0,i.yg)("inlineCode",{parentName:"p"},"$esp")," now points to ",(0,i.yg)("inlineCode",{parentName:"p"},"0xffffcf68")," (",(0,i.yg)("inlineCode",{parentName:"p"},"0xffffcf6c-0x4"),")."),(0,i.yg)("h3",{id:"frame-pointers-and-local-function-variables"},"Frame Pointers and Local Function Variables"),(0,i.yg)("p",null,"Whenever the processor is entering the execution for a function, a special logical container is created on the stack for that function."),(0,i.yg)("p",null,"This container is called a function frame.\nThe idea behind it is that the processor must know which area of the stack belongs to which function."),(0,i.yg)("p",null,"In order to achieve this logical segmentation a set of 2 instructions are automatically inserted by the compiler at the beginning of each function.\nCan you tell what they are based on the output below?"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"pwndbg> break main\nBreakpoint 1 at 0x80484c8\npwndbg> run\n[----------------------------------registers-----------------------------------]\n EAX  0xf7fa99e8 (environ) \u2014\u25b8 0xffffd02c \u2014\u25b8 0xffffd24d \u25c2\u2014 'COLORFGBG=15;0'\n EBX  0x0\n ECX  0xb8a6a751\n EDX  0xffffcfb4 \u25c2\u2014 0x0\n EDI  0x80490a0 (_start) \u25c2\u2014 xor    ebp, ebp\n ESI  0x1\n EBP  0xffffcf78 \u25c2\u2014 0x0\n ESP  0xffffcf70 \u25c2\u2014 0x1\n EIP  0x80491d0 (main+7) \u25c2\u2014 mov    eax, dword ptr [0x804c030]\n[-------------------------------------code-------------------------------------]\n   0x080491c9 <+0>:     push   ebp\n   0x080491ca <+1>:     mov    ebp,esp\n   0x080491cc <+3>:     push   ebx\n   0x080491cd <+4>:     sub    esp,0x4\n=> 0x080491d0 <+7>:     mov    eax,ds:0x804c030\n   0x080491d5 <+12>:    push   0x0\n   0x080491d7 <+14>:    push   0x1\n   0x080491d9 <+16>:    push   0x0\n   0x080491db <+18>:    push   eax\n\n[------------------------------------stack-------------------------------------]\n00:0000\u2502 esp 0xffffcf70 \u25c2\u2014 0x1\n01:0004\u2502     0xffffcf74 \u25c2\u2014 0x0\n02:0008\u2502 ebp 0xffffcf78 \u25c2\u2014 0x0\n03:000c\u2502     0xffffcf7c \u2014\u25b8 0xf7dda905 (__libc_start_main+229) \u25c2\u2014 add    esp, 0x10\n04:0010\u2502     0xffffcf80 \u25c2\u2014 0x1\n05:0014\u2502     0xffffcf84 \u2014\u25b8 0xffffd024 \u2014\u25b8 0xffffd1d9 \u25c2\u2014 '/home/kali/Desktop/sppb'\n06:0018\u2502     0xffffcf88 \u2014\u25b8 0xffffd02c \u2014\u25b8 0xffffd24d \u25c2\u2014 'COLORFGBG=15;0'\n07:001c\u2502     0xffffcf8c \u2014\u25b8 0xffffcfb4 \u25c2\u2014 0x0\n\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n\nBreakpoint 1, 0x080491d0 in main ()\npwndbg>  disass password_accepted\n\n\n   0x080491b2 <+0>:     push   ebp\n   0x080491b3 <+1>:     mov    ebp,esp\n   0x080491b5 <+3>:     push   0x0\n   0x080491b7 <+5>:     push   0x0\n   0x080491b9 <+7>:     push   0x804a008\n   0x080491be <+12>:    call   0x8049070 <execve@plt>\n   0x080491c3 <+17>:    add    esp,0xc\n   0x080491c6 <+20>:    nop\n   0x080491c7 <+21>:    leave\n   0x080491c8 <+22>:    ret\n\n")),(0,i.yg)("p",null,"What we did is we created a breakpoint for the start of the main function and then ran the program.\nAs you can see the first 2 instructions that got executed were ",(0,i.yg)("inlineCode",{parentName:"p"},"push ebp")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"mov ebp,esp"),"."),(0,i.yg)("p",null,"We then set a breakpoint for another function called ",(0,i.yg)("inlineCode",{parentName:"p"},"pass_accepted"),", continued execution and entered a password that we know is going to pass validation.\nOnce the breakpoint is hit, we can see the same 2 instructions ",(0,i.yg)("inlineCode",{parentName:"p"},"push ebp")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"mov ebp,esp"),"."),(0,i.yg)("p",null,"The two instructions which can be noticed at the beginning of any function are the instructions required for creating the logical container for each function on the stack."),(0,i.yg)("p",null,"In essence what they do is save the reference of the old container (",(0,i.yg)("inlineCode",{parentName:"p"},"push ebp"),") and record the current address at the top of the stack as the beginning of the new container(",(0,i.yg)("inlineCode",{parentName:"p"},"mov ebp,esp"),")."),(0,i.yg)("p",null,"For a visual explanation please see below:"),(0,i.yg)("p",null,(0,i.yg)("img",{parentName:"p",src:"https://security.cs.pub.ro/summer-school/wiki/_media/session/s5_frame_pointer_picture.jpg",alt:"Frame pointer"})),(0,i.yg)("p",null,"As you can see the ",(0,i.yg)("inlineCode",{parentName:"p"},"EBP")," register always points to the stack address that corresponds to the beginning of the current function's frame.\nThat is why it is most often referred to as the frame pointer."),(0,i.yg)("p",null,"In addition to the two instructions required for creating a new stack frame for a function, there are a couple more instructions that you will usually see at the beginning of a function"),(0,i.yg)("p",null,"If you analyze the instructions at the beginning of main, you can spot these as being:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"An ",(0,i.yg)("inlineCode",{parentName:"p"},"and esp,0xfffffff0")," instruction.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"A ",(0,i.yg)("inlineCode",{parentName:"p"},"sub")," instruction that subtracts a hex value from ESP."))),(0,i.yg)("p",null,"The first of the two instructions has the purpose of aligning the stack to a specific address boundary.\nThis is done to increase processor efficiency.\nIn our specific case, the top of the stack gets aligned to a 16 byte multiple address."),(0,i.yg)("p",null,"One of the purposes of the stack inside functions is that of offering address space in which to place local variables.\nThe second instruction preallocates space for local function variables."),(0,i.yg)("p",null,"Let's see how local variables are handled inside assembly code."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-c"},"#include <stdio.h>\nint main()\n{\n        int a;\n        a=1;\n        return 0;\n}\n")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},'kali@kali:~/sss$ gdb test\nGNU gdb (Ubuntu/Linaro 7.4-2012.02-0ubuntu2) 7.4-2012.02\nCopyright (C) 2012 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type "show copying"\nand "show warranty" for details.\nThis GDB was configured as "i686-linux-gnu".\nFor bug reporting instructions, please see:\n<http://bugs.launchpad.net/gdb-linaro/>...\nReading symbols from /home/dgioga/sss/test...(no debugging symbols found)...done.\npwndbg>  break main\nBreakpoint 1 at 0x80483ba\npwndbg>  run\n[----------------------------------registers-----------------------------------]\nEAX: 0x1\nEBX: 0xb7fc6ff4 --\x3e 0x1a0d7c\nECX: 0xbffff414 --\x3e 0xbffff576 ("/home/dgioga/sss/test")\nEDX: 0xbffff3a4 --\x3e 0xb7fc6ff4 --\x3e 0x1a0d7c\nESI: 0x0\nEDI: 0x0\nEBP: 0xbffff378 --\x3e 0x0\nESP: 0xbffff368 --\x3e 0x80483d9 (<__libc_csu_init+9>:,add    ebx,0x1c1b)\nEIP: 0x80483ba (<main+6>:,mov    DWORD PTR [ebp-0x4],0x1)\nEFLAGS: 0x200282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x80483b4 <main>:,  push   ebp\n   0x80483b5 <main+1>:,mov    ebp,esp\n   0x80483b7 <main+3>:,sub    esp,0x10\n=> 0x80483ba <main+6>:,mov    DWORD PTR [ebp-0x4],0x1\n   0x80483c1 <main+13>:,mov    eax,0x0\n   0x80483c6 <main+18>:,leave\n   0x80483c7 <main+19>:,ret\n   0x80483c8:,nop\n[------------------------------------stack-------------------------------------]\n0000| 0xbffff368 --\x3e 0x80483d9 (<__libc_csu_init+9>:,add    ebx,0x1c1b)\n0004| 0xbffff36c --\x3e 0xb7fc6ff4 --\x3e 0x1a0d7c\n0008| 0xbffff370 --\x3e 0x80483d0 (<__libc_csu_init>:,push   ebp)\n0012| 0xbffff374 --\x3e 0x0\n0016| 0xbffff378 --\x3e 0x0\n0020| 0xbffff37c --\x3e 0xb7e3f4d3 (<__libc_start_main+243>:,mov    DWORD PTR [esp],eax)\n0024| 0xbffff380 --\x3e 0x1\n0028| 0xbffff384 --\x3e 0xbffff414 --\x3e 0xbffff576 ("/home/dgioga/sss/test")\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n\nBreakpoint 1, 0x080483ba in main ()\n')),(0,i.yg)("p",null,"As you can see the operations that relate to the stack are:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"The old frame pointer is saved."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"EBP")," takes the value of ESP (the frame pointer is set to point to the current function's frame)."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"0x10")," is subtracted from ESP (reserve space for local variables)."),(0,i.yg)("li",{parentName:"ul"},"The value ",(0,i.yg)("inlineCode",{parentName:"li"},"0x01")," is placed at the address of ",(0,i.yg)("inlineCode",{parentName:"li"},"EBP-0x4")," (the local variable ",(0,i.yg)("inlineCode",{parentName:"li"},"a")," takes the value 1).")),(0,i.yg)("h3",{id:"function-parameters"},"Function Parameters"),(0,i.yg)("p",null,"The stack is also used to pass in parameters to functions."),(0,i.yg)("p",null,"In the process of calling a function we can define two entities.\nThe callee (the function that gets called) and the caller (the function that calls)."),(0,i.yg)("p",null,"When a function is called, the caller pushes the parameters for the callee on the stack.\nThe parameters are pushed in reverse order."),(0,i.yg)("p",null,"When the callee wants to get access to the parameters it was called with, all it needs to do is access the area of the stack that is higher up in reference to the start of it's frame."),(0,i.yg)("p",null,"At this point it makes sense to remember the following cases:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"When ",(0,i.yg)("inlineCode",{parentName:"li"},"EBP+value")," is referred to it is generally a referral to a parameter passed in to the current function."),(0,i.yg)("li",{parentName:"ul"},"When ",(0,i.yg)("inlineCode",{parentName:"li"},"EBP-value")," is referred to it is generally a referral to a local variable.")),(0,i.yg)("p",null,"Lets see how this happens with the following code:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-c"},"#include <stdio.h>\n\nint add(int a, int b)\n{\n        int c;\n        c=a+b;\n        return c;\n}\n\nint main()\n{\n        add(10,3);\n        return 0;\n}\n")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"pwndbg> pdis 0x080483ca\nDump of assembler code for function main:\n   0x080483ca <+0>:,push   ebp                        #save the old frame pointer\n   0x080483cb <+1>:,mov    ebp,esp                    #create the new frame pointer\n   0x080483cd <+3>:,sub    esp,0x8                    #create space for local variables\n   0x080483d0 <+6>:,mov    DWORD PTR [esp+0x4],0x3    #push the last parameter of the function that is to be called\n   0x080483d8 <+14>:,mov    DWORD PTR [esp],0xa      #push the second to last(the first in this case) parameter of the function that is to be called\n   0x080483df <+21>:,call   0x80483b4 <add>          #call the function\n   0x080483e4 <+26>:,mov    eax,0x0\n   0x080483e9 <+31>:,leave\n   0x080483ea <+32>:,ret\nEnd of assembler dump.\npwndbg> pdis 0x080483b4\nDump of assembler code for function add:\n   0x080483b4 <+0>:,push   ebp                        #save the old frame pointer\n   0x080483b5 <+1>:,mov    ebp,esp                    #create a new frame pointer\n   0x080483b7 <+3>:,sub    esp,0x10                   #create space for local variables\n   0x080483ba <+6>:,mov    eax,DWORD PTR [ebp+0xc]    #move the first parameter into the EAX register (ebp+saved_ebp(4 bytes)+return_addres(4 bytes)+last_parameter(4 bytes))\n   0x080483bd <+9>:,mov    edx,DWORD PTR [ebp+0x8]    #move the second parameter into the EDX register (ebp+saved_ebp(4 bytes)+return_addres(4 bytes))\n   0x080483c0 <+12>:,add    eax,edx                  #add the registers\n   0x080483c2 <+14>:,mov    DWORD PTR [ebp-0x4],eax  #place the result inside the local variable (c)\n   0x080483c5 <+17>:,mov    eax,DWORD PTR [ebp-0x4]  #place the result inside the eax register in order to return it\n   0x080483c8 <+20>:,leave\n   0x080483c9 <+21>:,ret\nEnd of assembler dump.\n")),(0,i.yg)("p",null,"As you can see the parameters were pushed in reverse order, and the rule regarding the reference to ",(0,i.yg)("inlineCode",{parentName:"p"},"EBP")," holds."),(0,i.yg)("p",null,"If you don't understand why the offset for the parameters starts at ",(0,i.yg)("inlineCode",{parentName:"p"},"EBP+0x08")," and not ",(0,i.yg)("inlineCode",{parentName:"p"},"EBP")," follow through with the next section."),(0,i.yg)("h3",{id:"calling-functions-call-and-ret"},"Calling Functions (",(0,i.yg)("inlineCode",{parentName:"h3"},"call")," and ",(0,i.yg)("inlineCode",{parentName:"h3"},"ret"),")"),(0,i.yg)("p",null,"When calling a function the callee places the return address on the stack.\nThis address is nothing more than a bookmark so that execution can resume where it left off once the called function finishes execution."),(0,i.yg)("p",null,"The last instruction in functions is usually a ",(0,i.yg)("inlineCode",{parentName:"p"},"ret")," instruction that resumes execution to the callee."),(0,i.yg)("p",null,"For a better understanding of function calling and returning, from an execution flow point of view, please follow through with the following tip."),(0,i.yg)("p",null,"The call instruction could be translated to the following instructions:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"push eip")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"mov eip, address_of_called_function"))),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"ret")," instruction could be translated into ",(0,i.yg)("inlineCode",{parentName:"p"},"pop eip"),"."),(0,i.yg)("p",null,"The visual depiction of how the stack looks while a program is executing can be found in section 2 but will be included here as well:"),(0,i.yg)("p",null,(0,i.yg)("img",{parentName:"p",src:"https://security.cs.pub.ro/summer-school/wiki/_media/session/stack-convention.png",alt:"Stack Convention"})),(0,i.yg)("h3",{id:"next-section-preview-buffer-overflows"},"Next Section Preview: Buffer Overflows"),(0,i.yg)("p",null,"Now that we have a complete overview of the stack we can step forward to stack based buffer overflows."),(0,i.yg)("p",null,"A buffer overflow takes place when there is a lack of checking regarding boundaries and usually result in complete control of the program's instruction pointer.\nThis takes place when a buffer overflows its boundaries and overwrites the return address of a function."),(0,i.yg)("p",null,"A typical example of buffer overflows can be seen in the following picture:"),(0,i.yg)("p",null,(0,i.yg)("img",{parentName:"p",src:"https://security.cs.pub.ro/summer-school/wiki/_media/session/s5_buffer_overflow.jpg",alt:"Buffer Overflow"})),(0,i.yg)("h2",{id:"challenges"},"Challenges"),(0,i.yg)("p",null,"Use GDB and Pwndbg to run the code provided in the Activities section."),(0,i.yg)("h3",{id:"01-challenge---explore-the-simple-password-protected-bash"},"01. Challenge - Explore The Simple Password Protected Bash"),(0,i.yg)("p",null,"The executable gets input from the user and evaluates it against a static condition.\nIf it succeeds it then calls a ",(0,i.yg)("inlineCode",{parentName:"p"},"password_accepted")," function that prints out a success message and spawns a shell."),(0,i.yg)("p",null,"Your task is to use GDB and Pwndbg to force the executable to call the ",(0,i.yg)("inlineCode",{parentName:"p"},"password_accepted")," function."),(0,i.yg)("p",null,"Gather as much info about the executable as possible through the techniques you have learned in previous sessions."),(0,i.yg)("p",null,"Think of modifying registers for forcing the executable to call the function (there is more than one way of doing this)."),(0,i.yg)("h3",{id:"02-challenge---simple-password-protected-bash-destruction"},"02. Challenge - Simple Password Protected Bash Destruction"),(0,i.yg)("p",null,"What is the condition against which your input is evaluated in the executable contained in the executable ",(0,i.yg)("inlineCode",{parentName:"p"},"sppb"),"?"),(0,i.yg)("p",null,"The ultimate goal is to be able to craft an input for the binary so that the ",(0,i.yg)("inlineCode",{parentName:"p"},"password_accepted")," function is called (modifying registers while running the program in GDB is just for training purposes)."),(0,i.yg)("h3",{id:"03-challenge---domino"},"03. Challenge - Domino"),(0,i.yg)("p",null,"Analyze the binary, reverse engineer what it does and get a nice message\nback."),(0,i.yg)("h3",{id:"04-challenge---call-me"},"04. Challenge - Call Me"),(0,i.yg)("p",null,"Investigate the binary in ",(0,i.yg)("inlineCode",{parentName:"p"},"04-challenge-call-me/src/call_me")," and find out the flag"),(0,i.yg)("p",null,"Hint: There is something hidden you can toy around with."),(0,i.yg)("p",null,"Hint: The challenge name is a hint."),(0,i.yg)("h3",{id:"05-challenge---snooze-me"},"05. Challenge - Snooze Me"),(0,i.yg)("p",null,"I wrote a simple binary that computes the answer to life, the universe and everything.\nIt swear it works... eventually."),(0,i.yg)("h3",{id:"06-challenge---phone-home"},"06. Challenge - Phone Home"),(0,i.yg)("p",null,"To protect their confidential data from those snooping cloud providers, the authors of ",(0,i.yg)("inlineCode",{parentName:"p"},"06-challenge-phone-home/src/phone_home")," have used some obfuscation techniques."),(0,i.yg)("p",null,"Unfortunately, the key feature of the application is now unreachable due to a bug.\nCan you bypass the impossible condition?"),(0,i.yg)("h3",{id:"07-challenge---chain-encoder"},"07. Challenge - Chain Encoder"),(0,i.yg)("p",null,"How do you reverse something made to be irreversible, you are welcome to find out in this challenge."),(0,i.yg)("h3",{id:"08-challenge---simple-cd-key"},"08. Challenge - Simple CD Key"),(0,i.yg)("p",null,"I found this software but i don't have the CD key, can you crack it for me?"))}u.isMDXComponent=!0}}]);